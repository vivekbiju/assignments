

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
     

# Load the dataset
carprice=pd.read_csv('/content/car_age_price.csv')
     

carprice.head()
     
Year	Price
0	2018	465000
1	2019	755000
2	2019	700000
3	2018	465000
4	2018	465000

# Check for missing values
carprice.isnull().sum()
     
Year     0
Price    0
dtype: int64

# Visualize the relationship between 'Year' and 'Price'
sns.scatterplot(x='Year', y='Price', data=carprice)
plt.title('Year vs. Price')
plt.show()
     


from sklearn.model_selection import train_test_split
     

# Splitting the data into training and testing sets
X = carprice[['Year']]
y = carprice['Price']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

     

from sklearn.linear_model import LinearRegression,Lasso
     

from sklearn.metrics import mean_squared_error,r2_score
     

# Linear Regression
lin_reg = LinearRegression()
lin_reg.fit(X_train, y_train)
lin_reg_pred = lin_reg.predict(X_test)
lin_reg_mse = mean_squared_error(y_test, lin_reg_pred)
lin_reg_r2 = r2_score(y_test, lin_reg_pred)
     

X_test
     
Year
40	2019
65	2017
4	2018
47	2018
42	2018
69	2015
26	2017
11	2018
10	2019
44	2019
73	2013
55	2017
68	2015
97	2020
0	2018
18	2019
53	2013
80	2015
103	2017
91	2017
36	2017
12	2017
31	2017

lin_reg_pred
     
array([600775.91252081, 505558.77690466, 553167.34471273, 553167.34471273,
       553167.34471273, 410341.6412885 , 505558.77690466, 553167.34471273,
       600775.91252081, 600775.91252081, 315124.50567235, 505558.77690466,
       410341.6412885 , 648384.48032889, 553167.34471273, 600775.91252081,
       315124.50567235, 410341.6412885 , 505558.77690466, 505558.77690466,
       505558.77690466, 505558.77690466, 505558.77690466])

print("Linear Regression:")
print("Mean Squared Error:", lin_reg_mse)
print("R-squared:", lin_reg_r2)
     
Linear Regression:
Mean Squared Error: 4326906256.829671
R-squared: 0.36759313425902185

# Lasso Regression
lasso_reg = Lasso(alpha=0.1)  # Adjust alpha for regularization
lasso_reg.fit(X_train, y_train)
lasso_reg_pred = lasso_reg.predict(X_test)
lasso_reg_mse = mean_squared_error(y_test, lasso_reg_pred)
lasso_reg_r2 = r2_score(y_test, lasso_reg_pred)
     

lasso_reg_pred
     
array([600775.81201603, 505558.75884159, 553167.28542881, 553167.28542881,
       553167.28542881, 410341.70566715, 505558.75884159, 553167.28542881,
       600775.81201603, 600775.81201603, 315124.65249272, 505558.75884159,
       410341.70566715, 648384.33860324, 553167.28542881, 600775.81201603,
       315124.65249272, 410341.70566715, 505558.75884159, 505558.75884159,
       505558.75884159, 505558.75884159, 505558.75884159])

print("\nLasso Regression:")
print("Mean Squared Error:", lasso_reg_mse)
print("R-squared:", lasso_reg_r2)
     
Lasso Regression:
Mean Squared Error: 4326901608.19506
R-squared: 0.36759381368868127

# Compare models
if lin_reg_r2 > lasso_reg_r2:
    print("\nLinear Regression performs better.")
else:
    print("\nLasso Regression performs better.")
     
Lasso Regression performs better.

# Predicting the price of a 2022 model
year_2022 = 2022
predicted_price = lin_reg.predict([[year_2022]])
print("\nPredicted price of a 2022 model second-hand Hyundai Grand i10 is:", predicted_price[0])
     
Predicted price of a 2022 model second-hand Hyundai Grand i10 is: 743601.6159450412
/usr/local/lib/python3.10/dist-packages/sklearn/base.py:439: UserWarning: X does not have valid feature names, but LinearRegression was fitted with feature names
  warnings.warn(
